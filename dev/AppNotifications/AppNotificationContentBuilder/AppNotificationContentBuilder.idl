// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

namespace Microsoft.Windows.AppNotifications
{
    // Use for retrieving values store in the arguments string received from an AppNotification activation.
    [contract(AppNotificationsContract, 2)]
    runtimeclass ArgumentsDecoder
    {
        ArgumentsDecoder(String arguments);

        String GetStringArgument(String key);
        Int32 GetInt32Argument(String key);
        Double GetDoubleArgument(String key);
        Single GetSingleArgument(String key);
        Boolean GetBooleanArgument(String key);
    }

    [contract(AppNotificationsContract, 2)]
    runtimeclass ButtonConfig
    {
        ButtonConfig(String content);

        // Gets the text to display on the button.
        String Content{ get; };

        // Gets app-defined string of arguments that the app can later retrieve once it is activated when the user clicks the button.
        String Arguments { get; };

        // Gets or sets an identifier used in telemetry to identify your category of action.This should be something like "Delete",
        // "Reply", or "Archive".In the upcoming toast telemetry dashboard in Dev Center, you will be able to view how frequently
        // your actions are being clicked.
        String HintActionId{ get; };
        ButtonConfig SetHintActionId(String hintActionId);

        // Gets or sets the ID of an existing AppNotificationTextBox in order to have this button display to the right of the input.
        String TextBoxId{ get; };
        ButtonConfig SetTextBoxId(String textBoxId);

        // Adds a key(without value) to the activation arguments that will be returned when the toast notification or its buttons are clicked.
        ButtonConfig AddArgument(String key);

        // Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
        [default_overload]
        ButtonConfig AddArgument(String key, String value);
        ButtonConfig AddArgument(String key, Int32 value);
        ButtonConfig AddArgument(String key, Double value);
        ButtonConfig AddArgument(String key, Single value);
        ButtonConfig AddArgument(String key, Boolean value);

        // Retrieves the XML content of the button.
        String GetXml();
    }

    [contract(AppNotificationsContract, 2)]
    enum AdaptiveImageCrop
    {
        Default = 0, // Cropping behavior determined by renderer.
        None = 1, // Image is not cropped.
        Circle = 2, // Image is cropped to a circle shape.
    };

    [contract(AppNotificationsContract, 2)]
    runtimeclass ImageConfig
    {
        ImageConfig(Windows.Foundation.Uri imageUri);

        // A description of the image, for users of assistive technologies.
        String AlternateText{ get; };
        ImageConfig SetAlternateText(String alternateText);

        // An enum to describe how the image will be cropped.
        AdaptiveImageCrop HintCrop{ get; };
        ImageConfig SetHintCrop(AdaptiveImageCrop hintCrop);

        // Override the app logo with custom image of choice that will be displayed on the AppNotification, otherwise it will be an inline image.
        Boolean IsAppLogo{ get; };
        ImageConfig SetIsAppLogo(Boolean isAppLogo);

        // A value whether Windows is allowed to append a query string to the image URI supplied in the Tile notification.
        Boolean AddImageQuery{ get; };
        ImageConfig SetAddImageQuery(Boolean addImageQuery);

        // Retrieves the XML content of the image.
        String GetXml();
    }

    [contract(AppNotificationsContract, 2)]
    runtimeclass AppNotificationContentBuilder
    {
        AppNotificationContentBuilder();

        // Adds a key(without value) to the activation arguments that will be returned when the toast notification or its buttons are clicked.
        AppNotificationContentBuilder AddArgument(String key);

        // Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
        [default_overload]
        AppNotificationContentBuilder AddArgument(String key, String value);
        AppNotificationContentBuilder AddArgument(String key, Boolean value);
        AppNotificationContentBuilder AddArgument(String key, Int32 value);
        AppNotificationContentBuilder AddArgument(String key, Double value);
        AppNotificationContentBuilder AddArgument(String key, Single value);

        // Adds text to the toast with a language and a maximum number of lines.
        AppNotificationContentBuilder AddText(String text, Int32 hintMaxLines, String language);

        // Text to be displayed as attribution text.
        AppNotificationContentBuilder AddAttributionText(String text);

        // Text to be displayed as attribution text with language tags such as "en-US" or "fr-FR".
        AppNotificationContentBuilder AddAttributionText(String text, String language);

        // Text to be displayed as attribution text with language tags such as "en-US" or "fr-FR".
        AppNotificationContentBuilder AddButton(ButtonConfig button);

        // Add an input text box that the user can type into.
        // textBoxId - Required ID property so that developers can retrieve user input once the app is activated.
        // placeHolderContent - Placeholder text to be displayed on the text box when the user hasn't typed any text yet.
        // title - Title text to display above the text box.
        AppNotificationContentBuilder AddInputTextBox(String textBoxId, String placeHolderContent, String title);

        // Add an image to the AppNotification.
        AppNotificationContentBuilder AddImage(ImageConfig image);

        // Retrieves the notification XML content so that it can be used with a local
        // AppNotification constructor.
        String GetXml();

        // Shows a new AppNotification notification with the current content.
        void Show();
    }
}

